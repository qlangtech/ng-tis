import {Injectable} from '@angular/core';
<<<<<<< HEAD


import 'rxjs/add/operator/toPromise';
import {Http, Headers, RequestOptionsArgs} from '@angular/http';
=======

import 'rxjs/add/operator/toPromise';
import {Headers, Http, RequestOptionsArgs} from '@angular/http';
>>>>>>> aa80d33f314a3c626b6adb9fb2e0f8626159f9db

import {CurrentCollection} from '../common/basic.form.component';

declare var TIS: any;

@Injectable()
export class TISService {
  // 导航栏头部的应用是否可以选择？
  // private appSelectable: boolean = false;
  private isDailyRuntime: boolean;

  constructor(protected http: Http, private modalService: NgbModal) {
    this.isDailyRuntime = true;
  }

  // 是否是日常环境
  public get daily(): boolean {
    return TIS.daily;
  }

  // 通过部门id
  public getIndexListByDptId(dptid: number): Promise<any> {

    return this.http.get('/runtime/changedomain.ajax?event_submit_do_select_change=y&action=change_domain_action&bizid=' + dptid)
      .toPromise()
      .then(response => response.json().bizresult as any)
      .catch(this.handleError);
  }

  public isDaily(): boolean {
    return this.isDailyRuntime;
  }

  public set currentApp(currApp: CurrentCollection) {

  }

// 发送http post请求
  public httpPost(url: string, body: string): Promise<any> {

    let headers = new Headers();
    headers.append('content-type', 'application/x-www-form-urlencoded; charset=UTF-8');
    this.appendHeaders(headers);

    let opts: RequestOptionsArgs = {headers: headers};

    return this.http.post(url, body, opts)
      .toPromise()
      .then(response => {
        return this.processResult(response.json());
      }).catch(this.handleError);
  }

  protected  appendHeaders(headers: Headers): void {

  }


// 发送json表单
  public jsonPost(url: string, body: any): Promise<any> {
    let headers = new Headers();
    headers.append('content-type', 'text/json; charset=UTF-8');
    this.appendHeaders(headers);
    let opts: RequestOptionsArgs = {headers: headers};

    return this.http.post(url, body, opts)
      .toPromise()
      .then(response => {
        return this.processResult(response.json());
      }).catch(this.handleError);
  }

  public jPost(url: string, o: any): Promise<any> {
    return this.jsonPost(url, JSON.stringify(o));
  }

  private processResult(result: { bizresult: any, success: boolean, errormsg: string[] }): any {

    if (result.success) {
      return result;
    } else {
      // faild
      // var errs: string[] = result.errormsg;
      //
      //   //this.modalService.open(InfoDialogComponent,{size:'sm'});
      // console.info(errs);
      return result;
    }
  }

  protected handleError(error: any): Promise<any> {
    console.error('An error occurred', error);
    return Promise.reject(error.message || error);
  }

}

@Injectable()
export class AppTISService extends TISService {
  // 当前上下文中使用的索引实例
  private currApp: CurrentCollection;

  constructor(http: Http, modalService: NgbModal) {
    super(http, modalService);
  }

  public set currentApp(currApp: CurrentCollection) {
    this.currApp = currApp;
  }

  public get currentApp() {
    return this.currApp;
  }

  protected appendHeaders(headers: Headers): void {
    if (this.currApp) {
      headers.append('appname', this.currApp.appName);
      headers.append('appid', '' + this.currApp.appid);
    }
  }
}



